resource_types:
# - name: slack-alert
#   type: docker-image
#   source:
#     repository: arbourd/concourse-slack-alert-resource
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: latest

resources:
  - name: cf-deployment-concourse-tasks
    type: git
    icon: github
    source:
      uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks.git
  - name: cf-performance-tests-pipeline
    type: git
    icon: github
    source:
      uri: https://github.com/sap-contributions/cf-performance-tests-pipeline.git
      username: ((cf-perf-github-username))
      password: ((cf-perf-github-user-token))
      branch: ((results-branch))
  - name: bbl-state-file
    type: s3
    icon: aws
    source:
      region_name: ((region))
      bucket: ((bbl-state-bucket-name))
      versioned_file: bbl-state.tar.gz
      initial_version: "0"
      access_key_id: ((bbl-state-bucket-access-key-id))
      secret_access_key: ((bbl-state-bucket-access-key-secret))
  - name: cf-deployment
    type: git
    icon: github
    source:
      uri: https://github.com/cloudfoundry/cf-deployment.git
      branch: main
      tag_filter: v*
  - name: cf-performance-tests
    type: git
    icon: github
    source:
      uri: https://github.com/cloudfoundry/cf-performance-tests.git
      branch: CFP-1806
  - name: cf-acceptance-tests
    type: git
    icon: github
    source:
      uri: https://github.com/cloudfoundry/cf-acceptance-tests.git
      tag_filter: v*
  # - name: slack-notification
  #   type: slack-alert
  #   source:
  #     url: ((cf-perf-slack-notification-url))
  - name: base-infra
    type: terraform
    icon: terraform
    source:
      env_name: terraform
      backend_type: s3
      backend_config:
        bucket: ((bbl-state-bucket-name))
        workspace_key_prefix: base-infra
        key: terraform.tfstate
        region: ((region))
        access_key: ((bbl-state-bucket-access-key-id))
        secret_key: ((bbl-state-bucket-access-key-secret))
      env:
        AWS_ACCESS_KEY_ID: ((aws-access-key-id))
        AWS_SECRET_ACCESS_KEY: ((aws-access-key-secret))
        AWS_DEFAULT_REGION: ((region))

jobs:
  - name: detect-new-versions
    serial: true
    plan:
      - get: cf-performance-tests-pipeline
        trigger: true
      - get: cf-deployment
        trigger: true
      - set_pipeline: self
        file: cf-performance-tests-pipeline/ci/deploy-cf-perftest.yml
        var_files:
          - cf-performance-tests-pipeline/variables/vars-((env_name))-perf-common.yml

  - name: create-base-infra
    serial: true
    plan:
      - get: cf-performance-tests-pipeline
        trigger: true
        passed: [detect-new-versions]
      - get: cf-deployment
        trigger: true
        passed: [detect-new-versions]
      - put: base-infra
        params:
          terraform_source: cf-performance-tests-pipeline/base-infra/terraform
          vars:
            env_name: ((env_name))
            system_domain: cf.((domain))
            region: ((region))

  - name: bbl-up
    serial: true
    plan:
      - in_parallel:
        - get: cf-performance-tests-pipeline
          trigger: true
          passed: [create-base-infra]
        - get: cf-deployment
          trigger: true
          passed: [create-base-infra]
        - get: cf-deployment-concourse-tasks
        - get: bbl-state-file
          params:
            unpack: true
        - get: base-infra
          passed: [create-base-infra]
      - load_var: base-infra
        file: base-infra/metadata
        format: json
      - task: bbl-up
        file: cf-deployment-concourse-tasks/bbl-up/task.yml
        input_mapping:
          bbl-config: cf-performance-tests-pipeline
          bbl-state: bbl-state-file
        params:
          BBL_IAAS: aws
          BBL_AWS_ACCESS_KEY_ID: ((.:base-infra.aws_creds.aws_access_key_id))
          BBL_AWS_SECRET_ACCESS_KEY: ((.:base-infra.aws_creds.aws_secret_access_key))
          BBL_AWS_REGION: ((region))
          BBL_STATE_DIR: state
          BBL_CONFIG_DIR: bbl-patches
          BBL_LB_CERT: ((.:base-infra.cert_pem))
          BBL_LB_KEY: ((.:base-infra.private_key))
          LB_DOMAIN: cf.((domain))
          SKIP_LB_CREATION: false
          DEBUG_MODE: false
          STORE_BBL_STATE_AS_TARBALL: true
          DELETE_TERRAFORM_PLUGINS: true
          TF_VAR_parent_zone_id: ((parent_zone_id))
          TF_VAR_idle_timeout: ((cf_router_idle_timeout_secs))
        # on_failure:
        #   put: slack-notification
        #   params:
        #     alert_type: failed
        ensure:
          put: bbl-state-file
          params:
            file: updated-bbl-state/bbl-state.tgz

  - name: bosh-deploy
    serial: true
    serial_groups: [deploy-test-destroy]
    plan:
      - in_parallel:
        - get: cf-performance-tests-pipeline
          trigger: true
          passed: [bbl-up]
        - get: cf-deployment
          trigger: true
          passed: [bbl-up]
        - get: cf-deployment-concourse-tasks
        - get: bbl-state-file
          params:
            unpack: true
          passed: [bbl-up]
      - task: bosh-deploy
        file: cf-deployment-concourse-tasks/bosh-deploy/task.yml
        input_mapping:
          bbl-state: bbl-state-file
          ops-files: cf-performance-tests-pipeline
        params:
          BBL_STATE_DIR: state
          MANIFEST_FILE: cf-deployment.yml
          SYSTEM_DOMAIN: cf.((domain))
          OPS_FILES: "operations/use-bionic-stemcell.yml((additional-ops-files)) operations/scale-up-vms.yml operations/speed-up-dynamic-asgs.yml"
        # on_failure:
        #   put: slack-notification
        #   params:
        #     alert_type: failed

  - name: bosh-clean-up
    serial: true
    plan:
      - in_parallel:
        - get: cf-performance-tests-pipeline
          trigger: true
          passed: [bosh-deploy]
        - get: cf-deployment
          trigger: true
          passed: [bosh-deploy]
        - get: cf-deployment-concourse-tasks
        - get: bbl-state-file
          params:
            unpack: true
      - task: bosh-clean-up
        file: cf-deployment-concourse-tasks/bosh-cleanup/task.yml
        input_mapping:
          bbl-state: bbl-state-file
        params:
          BBL_STATE_DIR: state

  - name: run-performance-tests
    serial: true
    serial_groups: [deploy-test-destroy]
    plan:
      - in_parallel:
        - get: cf-performance-tests-pipeline
          trigger: true
          passed: [bosh-deploy]
        - get: cf-deployment
          trigger: true
          passed: [bosh-deploy]
        - get: bbl-state-file
          params:
            unpack: true
        - get: cf-performance-tests
      - task: run-performance-tests
        file: cf-performance-tests-pipeline/ci/tasks/run-performance-tests/task.yml
        input_mapping:
          bbl-state: bbl-state-file
        params:
          BBL_STATE_DIR: state
          GIT_COMMIT_EMAIL: "((cf-perf-github-user-email))"
          GIT_COMMIT_USERNAME: "((cf-perf-github-username))"
          GIT_COMMIT_MESSAGE: "Performance tests results"
          TEST_RESULTS_FOLDER: "((test-results-folder))"
          TEST_SUITE_FOLDER: "((test-suite-folder))"
          DATABASE_TYPE: "((database-type))"
        # on_failure:
        #   put: slack-notification
        #   params:
        #     alert_type: failed
      # - put: cf-performance-tests-pipeline
      #   params:
      #     repository: performance-test-results
      #     rebase: true

  - name: generate-chart
    serial: true
    plan:
      - in_parallel:
        - get: cf-performance-tests-pipeline
          trigger: true
          passed: [run-performance-tests]
        - get: cf-deployment
          trigger: true
          passed: [run-performance-tests]
      - task: generate-chart
        file: cf-performance-tests-pipeline/ci/tasks/generate-charts/task.yml
        params:
          GIT_COMMIT_EMAIL: "((cf-perf-github-user-email))"
          GIT_COMMIT_USERNAME: "((cf-perf-github-username))"
          GIT_COMMIT_MESSAGE: "Generated Chart"
          TEST_RESULTS_FOLDER: "cf-performance-tests-pipeline/((test-results-folder))"
          GENERATED_CHARTS_FOLDER: "cf-performance-tests-pipeline/((generated-charts-folder))"
        # on_failure:
        #   put: slack-notification
        #   params:
        #     alert_type: failed
      # - put: cf-performance-tests-pipeline
      #   params:
      #     repository: generated-charts
      #     rebase: true

  - name: cf-acceptance-tests
    serial: true
    serial_groups: [deploy-test-destroy]
    plan:
      - in_parallel:
        - get: cf-deployment-concourse-tasks
        - get: cf-acceptance-tests
        - get: cf-performance-tests-pipeline
          trigger: true
          passed: [run-performance-tests]
        - get: cf-deployment
          trigger: true
          passed: [run-performance-tests]
        - get: bbl-state-file
          params:
            unpack: true
      - task: generate-cats-config
        file: cf-performance-tests-pipeline/ci/tasks/generate-cats-config/task.yml
        input_mapping:
          bbl-state: bbl-state-file
        params:
          SYSTEM_DOMAIN: cf.((domain))
      # - task: cf-acceptance-tests
      #   file: cf-deployment-concourse-tasks/run-cats/task.yml
      #   params:
      #     NODES: 1
        # on_failure:
        #   put: slack-notification
        #   params:
        #     alert_type: failed

  - name: bosh-delete-cf-deployment
    serial: true
    serial_groups: [deploy-test-destroy]
    plan:
      - in_parallel:
        - get: cf-performance-tests-pipeline
          trigger: true
          passed: [cf-acceptance-tests]
        - get: cf-deployment
          trigger: true
          passed: [cf-acceptance-tests]
        - get: cf-deployment-concourse-tasks
        - get: bbl-state-file
          params:
            unpack: true
      - task: bosh-delete-deployments
        file: cf-deployment-concourse-tasks/bosh-delete-deployment/task.yml
        input_mapping:
          bbl-state: bbl-state-file
        params:
          BBL_STATE_DIR: state
          IGNORE_ERRORS: true
        # on_failure:
        #   put: slack-notification
        #   params:
        #     alert_type: failed

  - name: teardown
    serial: true
    serial_groups: [deploy-test-destroy]
    plan:
      - get: cf-performance-tests-pipeline
        trigger: true
        passed: [bosh-delete-cf-deployment]
      - get: cf-deployment
        trigger: true
        passed: [bosh-delete-cf-deployment]
      - get: cf-deployment-concourse-tasks
      - get: bbl-state-file
        params:
          unpack: true
      - get: base-infra
      - load_var: base-infra
        file: base-infra/metadata
        format: json
      - task: bbl-destroy
        file: cf-deployment-concourse-tasks/bbl-destroy/task.yml
        input_mapping:
          bbl-state: bbl-state-file
        params:
          BBL_STATE_DIR: state
          BBL_AWS_ACCESS_KEY_ID: ((.:base-infra.aws_creds.aws_access_key_id))
          BBL_AWS_SECRET_ACCESS_KEY: ((.:base-infra.aws_creds.aws_secret_access_key))
          BBL_AWS_REGION: ((region))
          STORE_BBL_STATE_AS_TARBALL: true
          TF_VAR_parent_zone_id: ((parent_zone_id))
          TF_VAR_idle_timeout: ((cf_router_idle_timeout_secs))
        ensure:
          put: bbl-state-file
          params:
            file: updated-bbl-state/bbl-state.tgz
      - put: base-infra
        params:
          action: destroy
          terraform_source: cf-performance-tests-pipeline/base-infra/terraform
          vars:
            system_domain: cf.((domain))
        get_params:
          action: destroy
